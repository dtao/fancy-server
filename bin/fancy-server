#!/usr/bin/env node

var fs        = require('fs'),
    path      = require('apathy'),
    http      = require('http'),
    marked    = require('marked'),
    mustache  = require('mustache'),
    hljs      = require('highlight.js'),
    commander = require('commander');

// Markdown configuration
marked.setOptions({
  highlight: function(code, lang) {
    if (lang === 'html') { lang = 'xml'; }
    return hljs.highlight(lang, code).value
  }
});

// data and whatnot
var rootDir      = path.join(__dirname, '..'),
    packageInfo  = JSON.parse(fs.readFileSync(path.join(rootDir, 'package.json'), 'utf-8')),
    resourcesDir = path.join(rootDir, 'resources'),
    layout       = fs.readFileSync(path.join(resourcesDir, 'layout.html.mustache'), 'utf8'),
    index        = fs.readFileSync(path.join(resourcesDir, 'index.html.mustache'), 'utf8'),
    article      = fs.readFileSync(path.join(resourcesDir, 'article.html.mustache'), 'utf8');

commander
  .version(packageInfo.version)
  .option('-p, --port <port>', 'specify the port to listen on')
  .option('-t, --theme <theme>', 'specify a Bootswatch theme (or "default")')
  .option('-h, --highlight-theme <theme>', 'specify a highlight.js theme (or "default")')
  .parse(process.argv);

// options, with defaults
var port               = commander.port || 8080,
    themeHref          = urlForTheme(commander.theme || 'default'),
    highlightThemeHref = urlForHighlightTheme(commander.highlightTheme || 'default');

function urlForTheme(theme) {
  if (theme === 'default') {
    return '//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css';
  }

  return '//netdna.bootstrapcdn.com/bootswatch/3.0.1/' + theme + '/bootstrap.min.css';
}

function urlForHighlightTheme(highlightTheme) {
  return '//highlightjs.org/static/styles/' + highlightTheme + '.css';
}

function titleFromPath(filePath) {
  filePath = path.basename(filePath, path.extname(filePath));
  return filePath.charAt(0).toUpperCase() + filePath.substring(1).replace(/[\-_]/g, ' ');
}

function getArticleInfo(filePath) {
  return {
    href: filePath,
    title: titleFromPath(filePath)
  };
}

function getArticleList(callback) {
  fs.readdir(process.cwd(), function(err, files) {
    var articleList = [];
    for (var i = 0; i < files.length; ++i) {
      if (!files[i].match(/\.(?:md|markdown)$/)) {
        continue;
      }

      articleList.push(getArticleInfo(files[i]));
    }

    callback(articleList);
  });
}

function contentType(response, type) {
  response.writeHead(200, { 'Content-Type': type });
}

function contentTypeForFile(response, filePath) {
  switch (path.extname(filePath).toLowerCase()) {
    case '.gif':
      return 'image/gif';

    case '.jpg':
    case '.jpeg':
      return 'image/jpg';

    case '.png':
      return 'image/png';
  }
}

function renderIndex(response) {
  getArticleList(function(articles) {
    var partials = { content: index };

    contentType(response, 'text/html');
    response.end(
      mustache.render(layout, {
        title: path.basename(process.cwd()),
        themeHref: themeHref,
        highlightThemeHref: highlightThemeHref,
        articles: articles
      }, partials)
    );
  });
}

function checkFileAccess(filePath, response) {
  if (!path.isDescendant(filePath)) {
    response.writeHead(403);
    response.end();
    return false;
  }

  return true;
}

function renderArticle(filePath, response) {
  filePath = path.join(process.cwd(), filePath);
  if (!checkFileAccess(filePath, response)) {
    return;
  }

  fs.readFile(filePath, { encoding: 'utf8' }, function(err, source) {
    if (err) {
      response.writeHead(404);
      response.end();
      return;
    }

    var partials = { content: article };

    response.end(
      mustache.render(layout, {
        title: titleFromPath(filePath),
        theme: theme,
        content: marked(source)
      }, partials)
    );
  });
}

function serveFile(filePath, response) {
  filePath = path.join(process.cwd(), filePath);
  if (!checkFileAccess(filePath, response)) {
    return;
  }

  fs.readFile(filePath, function(err, data) {
    if (err) {
      response.writeHead(404)
      response.end();
      return;
    }

    contentType(response, contentTypeForFile(filePath));
    response.end(data, 'binary');
  });
}

var server = http.createServer(function(request, response) {
  if (request.url === '/') {
    renderIndex(response);
    return;
  }

  switch (path.extname(request.url)) {
    case '.md':
    case '.markdown':
      renderArticle(request.url, response);
      break;

    default:
      serveFile(request.url, response);
      break;
  }
});

server.listen(port);

console.log('Server running at http://localhost:' + port + '/');
