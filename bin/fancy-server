#!/usr/bin/env node

var fs        = require('fs'),
    path      = require('path'),
    http      = require('http'),
    marked    = require('marked'),
    mustache  = require('mustache'),
    bootscrap = require('bootscrap'),
    commander = require('commander');

// data and whatnot
var rootDir      = path.join(__dirname, '..'),
    packageInfo  = JSON.parse(fs.readFileSync(path.join(rootDir, 'package.json'), 'utf-8')),
    resourcesDir = path.join(rootDir, 'resources'),
    layout       = fs.readFileSync(path.join(resourcesDir, 'layout.html.mustache'), 'utf8'),
    index        = fs.readFileSync(path.join(resourcesDir, 'index.html.mustache'), 'utf8'),
    article      = fs.readFileSync(path.join(resourcesDir, 'article.html.mustache'), 'utf8');

commander
  .version(packageInfo.version)
  .option('-p, --port <port>', 'specify the port to listen on')
  .option('-t, --theme <theme>', 'specify a Bootswatch theme (or "default")')
  .parse(process.argv);

// options, with defaults
var port  = commander.port || 8080,
    theme = commander.theme || 'default';

function titleFromPath(filePath) {
  filePath = path.basename(filePath, path.extname(filePath));
  return filePath.charAt(0).toUpperCase() + filePath.substring(1).replace(/[\-_]/g, ' ');
}

function getArticleInfo(filePath) {
  return {
    href: filePath,
    title: titleFromPath(filePath)
  };
}

function getArticleList(callback) {
  fs.readdir(process.cwd(), function(err, files) {
    var articleList = [];
    for (var i = 0; i < files.length; ++i) {
      if (!files[i].match(/\.(?:md|markdown)$/)) {
        continue;
      }

      articleList.push(getArticleInfo(files[i]));
    }

    callback(articleList);
  });
}

function contentType(response, type) {
  response.writeHead(200, { 'Content-Type': type });
}

function renderIndex(response) {
  getArticleList(function(articles) {
    var partials = { content: index };

    contentType(response, 'text/html');
    response.end(
      mustache.render(layout, {
        title: path.basename(process.cwd()),
        theme: theme,
        articles: articles
      }, partials)
    );
  });
}

function renderStylesheet(filePath, response) {
  var theme = path.basename(filePath, '.css');

  contentType(response, 'text/css');
  response.end(bootscrap.css(theme));
}

function renderArticle(filePath, response) {
  fs.readFile(path.join(process.cwd(), filePath), { encoding: 'utf8' }, function(err, source) {
    var partials = { content: article };

    response.end(
      mustache.render(layout, {
        title: titleFromPath(filePath),
        theme: theme,
        content: marked(source)
      }, partials)
    );
  });
}

var server = http.createServer(function(request, response) {
  if (request.url === '/') {
    renderIndex(response);

  } else if (request.url.match(/\.css$/)) {
    renderStylesheet(request.url, response);

  } else if (request.url.match(/\.(?:md|markdown)$/)) {
    renderArticle(request.url, response);

  } else {
    response.writeHead(404)
    response.end();
  }
});

server.listen(port);

console.log('Server running at http://localhost:' + port + '/');
